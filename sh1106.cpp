#include <Wire.h>
#include "sh1106.h"
#include <ctype.h>




// oled pixel buffer
unsigned char oled_buffer[8][OLED_WIDTH];



// init sequence for the SH1106 controller.
const uint8_t SH1106_INIT_SEQUENCE[] PROGMEM =
{
    // deactivate screen
    0xAE,
    // lower/higher column address.
    0x02, 0x10,
    // page address
    0xB0,
    // set contrast to max.
    0x81, 0xFF,
    // set segment re-map
    0xA1,
    // normal/reverse
    0xA6,
    // set multiplex ratio 63
    0xA8, 0x3F,
    // activate internal charge pump
    0xAD, 0x8B,
    0x33,
    // set com output scan mode direction
    0xC0,
    // set display offset 0
    0xD3, 0x0,
    // set display oscillator frequency
    0xD5, 0xF0,
    0xD9, 0x1F,
    // set com pins config
    0xDA, 0x12,
    // activate data from ram.
    //0xA4,
    0xDB, 0x40,
    // set display start line.
    0x40,
    // activate display
    0xAF,
};


// Char pixel width, including neccessary extra space.
const unsigned char CHAR_WIDTH_DATA[] PROGMEM =
{
    11, 10, 10, 10, 11, 11, 11, 11, 11, 11, 15, 5, 5, 7, 14, 11, 12, 12, 8, 8, 13,
    12, 2, 7, 11, 8, 17, 12, 13, 8, 13, 11, 8, 12, 12, 13, 18, 11, 12, 8
};


const uint8_t FONT_TABLE[] PROGMEM =
{
    0x3E, 0x00, //   #####
    0x63, 0x00, //  ##   ##
    0x61, 0x00, //  ##    #
    0xC1, 0x80, // ##     ##
    0xC1, 0x80, // ##     ##
    0xC1, 0x80, // ##     ##
    0xC1, 0x80, // ##     ##
    0xC1, 0x80, // ##     ##
    0xC1, 0x80, // ##     ##
    0xC1, 0x80, // ##     ##
    0x43, 0x00, //  #    ##
    0x63, 0x00, //  ##   ##
    0x3E, 0x00, //   #####

    0x18, 0x00, //    ##
    0x78, 0x00, //  ####
    0xD8, 0x00, // ## ##
    0x98, 0x00, // #  ##
    0x18, 0x00, //    ##
    0x18, 0x00, //    ##
    0x18, 0x00, //    ##
    0x18, 0x00, //    ##
    0x18, 0x00, //    ##
    0x18, 0x00, //    ##
    0x18, 0x00, //    ##
    0x18, 0x00, //    ##
    0xFF, 0x00, // ########

    0x78, 0x00, //  ####
    0x8E, 0x00, // #   ###
    0x06, 0x00, //      ##
    0x06, 0x00, //      ##
    0x06, 0x00, //      ##
    0x06, 0x00, //      ##
    0x0C, 0x00, //     ##
    0x0C, 0x00, //     ##
    0x18, 0x00, //    ##
    0x30, 0x00, //   ##
    0x60, 0x00, //  ##
    0xC0, 0x00, // ##
    0xFF, 0x00, // ########

    0x7C, 0x00, //  #####
    0x8E, 0x00, // #   ###
    0x06, 0x00, //      ##
    0x06, 0x00, //      ##
    0x06, 0x00, //      ##
    0x0C, 0x00, //     ##
    0x78, 0x00, //  ####
    0x06, 0x00, //      ##
    0x03, 0x00, //       ##
    0x03, 0x00, //       ##
    0x03, 0x00, //       ##
    0x86, 0x00, // #    ##
    0x7C, 0x00, //  #####

    0x07, 0x00, //      ###
    0x0F, 0x00, //     ####
    0x0B, 0x00, //     # ##
    0x1B, 0x00, //    ## ##
    0x13, 0x00, //    #  ##
    0x33, 0x00, //   ##  ##
    0x63, 0x00, //  ##   ##
    0x43, 0x00, //  #    ##
    0xC3, 0x00, // ##    ##
    0xFF, 0xC0, // ##########
    0x03, 0x00, //       ##
    0x03, 0x00, //       ##/
    0x03, 0x00, //       ##

    0x7F, 0x00, //  ######
    0x60, 0x00, //  ##
    0x60, 0x00, //  ##
    0x60, 0x00, //  ##
    0x60, 0x00, //  ##
    0x7C, 0x00, //  #####
    0x06, 0x00, //      ##
    0x03, 0x00, //       ##
    0x03, 0x00, //       ##
    0x03, 0x00, //       ##
    0x03, 0x00, //       ##
    0x86, 0x00, // #    ##
    0x7C, 0x00, //  #####

    0x1F, 0x00, //    #####
    0x30, 0x00, //   ##
    0x60, 0x00, //  ##
    0xC0, 0x00, // ##
    0xC0, 0x00, // ##
    0xDE, 0x00, // ## ####
    0xE3, 0x00, // ###   ##
    0xC1, 0x80, // ##     ##
    0xC1, 0x80, // ##     ##
    0xC1, 0x80, // ##     ##
    0xC1, 0x80, // ##     ##
    0x63, 0x00, //  ##   ##
    0x3E, 0x00, //   #####

    0xFF, 0x80, // #########
    0x01, 0x80, //        ##
    0x03, 0x00, //       ##
    0x03, 0x00, //       ##
    0x06, 0x00, //      ##
    0x06, 0x00, //      ##
    0x04, 0x00, //      #
    0x0C, 0x00, //     ##
    0x0C, 0x00, //     ##
    0x18, 0x00, //    ##
    0x18, 0x00, //    ##
    0x30, 0x00, //   ##
    0x30, 0x00, //   ##

    0x3E, 0x00, //   #####
    0x63, 0x80, //  ##   ###
    0xC1, 0x80, // ##     ##
    0xC1, 0x80, // ##     ##
    0xE3, 0x00, // ###   ##
    0x76, 0x00, //  ### ##
    0x1E, 0x00, //    ####
    0x77, 0x00, //  ### ###
    0xC3, 0x80, // ##    ###
    0xC1, 0x80, // ##     ##
    0xC1, 0x80, // ##     ##
    0xE3, 0x00, // ###   ##
    0x3E, 0x00, //   #####

    0x3E, 0x00, //   #####
    0x63, 0x00, //  ##   ##
    0xC1, 0x00, // ##     #
    0xC1, 0x80, // ##     ##
    0xC1, 0x80, // ##     ##
    0xC1, 0x80, // ##     ##
    0x63, 0x80, //  ##   ###
    0x3D, 0x80, //   #### ##
    0x01, 0x80, //        ##
    0x01, 0x00, //        #
    0x03, 0x00, //       ##
    0x06, 0x00, //      ##
    0xFC, 0x00, // ######


    0x70, 0x30, //  ###      ##
    0xD8, 0x20, // ## ##     #
    0x88, 0x40, // #   #    #
    0x88, 0xC0, // #   #   ##
    0x89, 0x80, // #   #  ##
    0xDB, 0x00, // ## ## ##
    0x72, 0x70, //  ###  #  ###
    0x06, 0xD8, //      ## ## ##
    0x0C, 0x88, //     ##  #   #
    0x18, 0x88, //    ##   #   #
    0x10, 0x88, //    #    #   #
    0x20, 0xD8, //   #     ## ##
    0x60, 0x70, //  ##      ###

    0x00, 0x00, //
    0x00, 0x00, //
    0x00, 0x00, //
    0x00, 0x00, //
    0x00, 0x00, //
    0x00, 0x00, //
    0x00, 0x00, //
    0x00, 0x00, //
    0x00, 0x00, //
    0x00, 0x00, //
    0x00, 0x00, //
    0xC0, 0x00, // ##
    0xC0, 0x00, // ##

    0x00, 0x00, //
    0x00, 0x00, //
    0x00, 0x00, //
    0xC0, 0x00, // ##
    0xC0, 0x00, // ##
    0x00, 0x00, //
    0x00, 0x00, //
    0x00, 0x00, //
    0x00, 0x00, //
    0x00, 0x00, //
    0xC0, 0x00, // ##
    0xC0, 0x00, // ##
    0x00, 0x00, //

    0x00, 0x00, //
    0x60, 0x00, //  ##
    0x90, 0x00, // #  #
    0x90, 0x00, // #  #
    0x90, 0x00, // #  #
    0x60, 0x00, //  ##
    0x00, 0x00, //
    0x00, 0x00, //
    0x00, 0x00, //
    0x00, 0x00, //
    0x00, 0x00, //
    0x00, 0x00, //
    0x00, 0x00, //

    0x06, 0x00, //      ##
    0x0F, 0x00, //     ####
    0x0F, 0x00, //     ####
    0x09, 0x00, //     #  #
    0x19, 0x80, //    ##  ##
    0x19, 0x80, //    ##  ##
    0x10, 0xC0, //    #    ##
    0x30, 0xC0, //   ##    ##
    0x30, 0xC0, //   ##    ##
    0x3F, 0xE0, //   #########
    0x60, 0x60, //  ##      ##
    0x60, 0x60, //  ##      ##
    0xC0, 0x30, // ##        ##

    0xFC, 0x00, // ######
    0xC6, 0x00, // ##   ##
    0xC3, 0x00, // ##    ##
    0xC3, 0x00, // ##    ##
    0xC3, 0x00, // ##    ##
    0xC6, 0x00, // ##   ##
    0xFE, 0x00, // #######
    0xC3, 0x00, // ##    ##
    0xC1, 0x80, // ##     ##
    0xC1, 0x80, // ##     ##
    0xC1, 0x80, // ##     ##
    0xC3, 0x00, // ##    ##
    0xFE, 0x00, // #######

    0x1F, 0x00, //    #####
    0x30, 0x80, //   ##    #
    0x60, 0x00, //  ##
    0x40, 0x00, //  #
    0xC0, 0x00, // ##
    0xC0, 0x00, // ##
    0xC0, 0x00, // ##
    0xC0, 0x00, // ##
    0xC0, 0x00, // ##
    0xC0, 0x00, // ##
    0x60, 0x00, //  ##
    0x30, 0x80, //   ##    #
    0x1F, 0x00, //    #####

    0xFE, 0x00, // #######
    0xC3, 0x00, // ##    ##
    0xC1, 0x80, // ##     ##
    0xC0, 0xC0, // ##      ##
    0xC0, 0xC0, // ##      ##
    0xC0, 0xC0, // ##      ##
    0xC0, 0xC0, // ##      ##
    0xC0, 0xC0, // ##      ##
    0xC0, 0xC0, // ##      ##
    0xC0, 0x80, // ##      #
    0xC1, 0x80, // ##     ##
    0xC3, 0x00, // ##    ##
    0xFC, 0x00, // ######

    0xFE, 0x00, // #######
    0xC0, 0x00, // ##
    0xC0, 0x00, // ##
    0xC0, 0x00, // ##
    0xC0, 0x00, // ##
    0xC0, 0x00, // ##
    0xFC, 0x00, // ######
    0xC0, 0x00, // ##
    0xC0, 0x00, // ##
    0xC0, 0x00, // ##
    0xC0, 0x00, // ##
    0xC0, 0x00, // ##
    0xFE, 0x00, // #######

    0xFE, 0x00, // #######
    0xC0, 0x00, // ##
    0xC0, 0x00, // ##
    0xC0, 0x00, // ##
    0xC0, 0x00, // ##
    0xC0, 0x00, // ##
    0xFE, 0x00, // #######
    0xC0, 0x00, // ##
    0xC0, 0x00, // ##
    0xC0, 0x00, // ##
    0xC0, 0x00, // ##
    0xC0, 0x00, // ##
    0xC0, 0x00, // ##

    0x0F, 0xC0, //     ######
    0x38, 0x60, //   ###    ##
    0x60, 0x00, //  ##
    0x60, 0x00, //  ##
    0xC0, 0x00, // ##
    0xC0, 0x00, // ##
    0xC3, 0xE0, // ##    #####
    0xC0, 0x60, // ##       ##
    0xC0, 0x60, // ##       ##
    0x60, 0x60, //  ##      ##
    0x60, 0x60, //  ##      ##
    0x30, 0x60, //   ##     ##
    0x0F, 0xC0, //     ######

    0xC0, 0xC0, // ##      ##
    0xC0, 0xC0, // ##      ##
    0xC0, 0xC0, // ##      ##
    0xC0, 0xC0, // ##      ##
    0xC0, 0xC0, // ##      ##
    0xC0, 0xC0, // ##      ##
    0xFF, 0xC0, // ##########
    0xC0, 0xC0, // ##      ##
    0xC0, 0xC0, // ##      ##
    0xC0, 0xC0, // ##      ##
    0xC0, 0xC0, // ##      ##
    0xC0, 0xC0, // ##      ##
    0xC0, 0xC0, // ##      ##

    0xC0, 0x00, // ##
    0xC0, 0x00, // ##
    0xC0, 0x00, // ##
    0xC0, 0x00, // ##
    0xC0, 0x00, // ##
    0xC0, 0x00, // ##
    0xC0, 0x00, // ##
    0xC0, 0x00, // ##
    0xC0, 0x00, // ##
    0xC0, 0x00, // ##
    0xC0, 0x00, // ##
    0xC0, 0x00, // ##
    0xC0, 0x00, // ##

    0x18, 0x00, //    ##
    0x18, 0x00, //    ##
    0x18, 0x00, //    ##
    0x18, 0x00, //    ##
    0x18, 0x00, //    ##
    0x18, 0x00, //    ##
    0x18, 0x00, //    ##
    0x18, 0x00, //    ##
    0x18, 0x00, //    ##
    0x18, 0x00, //    ##
    0x18, 0x00, //    ##
    0x98, 0x00, // #  ##
    0x70, 0x00, //  ###

    0xC1, 0x80, // ##     ##
    0xC3, 0x00, // ##    ##
    0xC6, 0x00, // ##   ##
    0xCC, 0x00, // ##  ##
    0xD8, 0x00, // ## ##
    0xF0, 0x00, // ####
    0xF0, 0x00, // ####
    0xD8, 0x00, // ## ##
    0xCC, 0x00, // ##  ##
    0xCE, 0x00, // ##  ###
    0xC6, 0x00, // ##   ##
    0xC3, 0x00, // ##    ##
    0xC1, 0x80, // ##     ##

    0xC0, 0x00, // ##
    0xC0, 0x00, // ##
    0xC0, 0x00, // ##
    0xC0, 0x00, // ##
    0xC0, 0x00, // ##
    0xC0, 0x00, // ##
    0xC0, 0x00, // ##
    0xC0, 0x00, // ##
    0xC0, 0x00, // ##
    0xC0, 0x00, // ##
    0xC0, 0x00, // ##
    0xC0, 0x00, // ##
    0xFF, 0x00, // ########

    0xE0, 0x1C, // ###        ###
    0xF0, 0x3C, // ####      ####
    0xF0, 0x3C, // ####      ####
    0xD8, 0x2C, // ## ##     # ##
    0xD8, 0x6C, // ## ##    ## ##
    0xD8, 0x4C, // ## ##    #  ##
    0xCC, 0xCC, // ##  ##  ##  ##
    0xCC, 0xCC, // ##  ##  ##  ##
    0xC4, 0x8C, // ##   #  #   ##
    0xC7, 0x8C, // ##   ####   ##
    0xC7, 0x8C, // ##   ####   ##
    0xC3, 0x0C, // ##    ##    ##
    0xC3, 0x0C, // ##    ##    ##

    0xE0, 0xC0, // ###     ##
    0xF0, 0xC0, // ####    ##
    0xF0, 0xC0, // ####    ##
    0xD8, 0xC0, // ## ##   ##
    0xD8, 0xC0, // ## ##   ##
    0xCC, 0xC0, // ##  ##  ##
    0xCC, 0xC0, // ##  ##  ##
    0xC6, 0xC0, // ##   ## ##
    0xC6, 0xC0, // ##   ## ##
    0xC3, 0xC0, // ##    ####
    0xC3, 0xC0, // ##    ####
    0xC1, 0xC0, // ##     ###
    0xC1, 0xC0, // ##     ###

    0x1F, 0x80, //    ######
    0x30, 0xC0, //   ##    ##
    0x60, 0x60, //  ##      ##
    0x40, 0x30, //  #        ##
    0xC0, 0x30, // ##        ##
    0xC0, 0x30, // ##        ##
    0xC0, 0x30, // ##        ##
    0xC0, 0x30, // ##        ##
    0xC0, 0x30, // ##        ##
    0xC0, 0x20, // ##        #
    0x60, 0x60, //  ##      ##
    0x30, 0xC0, //   ##    ##
    0x1F, 0x80, //    ######

    0xFC, 0x00, // ######
    0xC6, 0x00, // ##   ##
    0xC3, 0x00, // ##    ##
    0xC3, 0x00, // ##    ##
    0xC3, 0x00, // ##    ##
    0xC3, 0x00, // ##    ##
    0xC6, 0x00, // ##   ##
    0xFC, 0x00, // ######
    0xC0, 0x00, // ##
    0xC0, 0x00, // ##
    0xC0, 0x00, // ##
    0xC0, 0x00, // ##
    0xC0, 0x00, // ##

    0x1F, 0x80, //    ######
    0x30, 0xC0, //   ##    ##
    0x60, 0x60, //  ##      ##
    0x40, 0x30, //  #        ##
    0xC0, 0x30, // ##        ##
    0xC0, 0x30, // ##        ##
    0xC0, 0x30, // ##        ##
    0xC0, 0x30, // ##        ##
    0xC0, 0x30, // ##        ##
    0xC0, 0x20, // ##        #
    0x60, 0x60, //  ##      ##
    0x30, 0xC0, //   ##    ##
    0x1F, 0xF0, //    #########

    0xFC, 0x00, // ######
    0xC6, 0x00, // ##   ##
    0xC3, 0x00, // ##    ##
    0xC3, 0x00, // ##    ##
    0xC3, 0x00, // ##    ##
    0xC6, 0x00, // ##   ##
    0xFC, 0x00, // ######
    0xC6, 0x00, // ##   ##
    0xC6, 0x00, // ##   ##
    0xC3, 0x00, // ##    ##
    0xC3, 0x00, // ##    ##
    0xC1, 0x00, // ##     #
    0xC1, 0x80, // ##     ##

    0x3C, 0x00, //   ####
    0x62, 0x00, //  ##   #
    0xC0, 0x00, // ##
    0xC0, 0x00, // ##
    0xE0, 0x00, // ###
    0x70, 0x00, //  ###
    0x3C, 0x00, //   ####
    0x0E, 0x00, //     ###
    0x03, 0x00, //       ##
    0x03, 0x00, //       ##
    0x03, 0x00, //       ##
    0x86, 0x00, // #    ##
    0x7C, 0x00, //  #####

    0xFF, 0xC0, // ##########
    0x0C, 0x00, //     ##
    0x0C, 0x00, //     ##
    0x0C, 0x00, //     ##
    0x0C, 0x00, //     ##
    0x0C, 0x00, //     ##
    0x0C, 0x00, //     ##
    0x0C, 0x00, //     ##
    0x0C, 0x00, //     ##
    0x0C, 0x00, //     ##
    0x0C, 0x00, //     ##
    0x0C, 0x00, //     ##
    0x0C, 0x00, //     ##

    0xC0, 0xC0, // ##      ##
    0xC0, 0xC0, // ##      ##
    0xC0, 0xC0, // ##      ##
    0xC0, 0xC0, // ##      ##
    0xC0, 0xC0, // ##      ##
    0xC0, 0xC0, // ##      ##
    0xC0, 0xC0, // ##      ##
    0xC0, 0xC0, // ##      ##
    0xC0, 0xC0, // ##      ##
    0xC0, 0xC0, // ##      ##
    0xC0, 0xC0, // ##      ##
    0x61, 0x80, //  ##    ##
    0x3E, 0x00, //   #####

    0xC0, 0x20, // ##        #
    0x60, 0x60, //  ##      ##
    0x60, 0x60, //  ##      ##
    0x60, 0x40, //  ##      #
    0x30, 0xC0, //   ##    ##
    0x30, 0xC0, //   ##    ##
    0x10, 0x80, //    #    #
    0x19, 0x80, //    ##  ##
    0x19, 0x80, //    ##  ##
    0x09, 0x00, //     #  #
    0x0F, 0x00, //     ####
    0x0E, 0x00, //     ###
    0x06, 0x00, //      ##

    0xC1, 0x81, // ##     ##      #
    0xC1, 0xC1, // ##     ###     #
    0xC1, 0xC1, // ##     ###     #
    0x43, 0xC3, //  #    ####    ##
    0x63, 0x43, //  ##   ## #    ##
    0x63, 0x63, //  ##   ## ##   ##
    0x62, 0x62, //  ##   #  ##   #
    0x26, 0x26, //   #  ##   #  ##
    0x36, 0x36, //   ## ##   ## ##
    0x34, 0x34, //   ## #    ## #
    0x14, 0x34, //    # #    ## #
    0x1C, 0x1C, //    ###     ###
    0x1C, 0x18, //    ###     ##

    0xC1, 0x80, // ##     ##
    0xC1, 0x80, // ##     ##
    0x63, 0x00, //  ##   ##
    0x36, 0x00, //   ## ##
    0x36, 0x00, //   ## ##
    0x1C, 0x00, //    ###
    0x1C, 0x00, //    ###
    0x1C, 0x00, //    ###
    0x36, 0x00, //   ## ##
    0x63, 0x00, //  ##   ##
    0x63, 0x00, //  ##   ##
    0xC1, 0x80, // ##     ##
    0xC1, 0x80, // ##     ##

    0xC0, 0xC0, // ##      ##
    0x61, 0x80, //  ##    ##
    0x61, 0x80, //  ##    ##
    0x33, 0x00, //   ##  ##
    0x33, 0x00, //   ##  ##
    0x1E, 0x00, //    ####
    0x1E, 0x00, //    ####
    0x0C, 0x00, //     ##
    0x0C, 0x00, //     ##
    0x0C, 0x00, //     ##
    0x0C, 0x00, //     ##
    0x0C, 0x00, //     ##
    0x0C, 0x00, //     ##

    0xFF, 0x00, // ########
    0x03, 0x00, //       ##
    0x06, 0x00, //      ##
    0x06, 0x00, //      ##
    0x0C, 0x00, //     ##
    0x18, 0x00, //    ##
    0x18, 0x00, //    ##
    0x30, 0x00, //   ##
    0x30, 0x00, //   ##
    0x60, 0x00, //  ##
    0xC0, 0x00, // ##
    0xC0, 0x00, // ##
    0xFF, 0x00, // ########
};






SH1106::SH1106(uint8_t sh1106_i2c_address)
{
    this->i2c_address = sh1106_i2c_address;

    // Send init sequence to the SH1106 controller.
    for(uint16_t i = 0; i < sizeof(SH1106_INIT_SEQUENCE); i++)
    {
        write_command(pgm_read_byte_near(SH1106_INIT_SEQUENCE + i));
    }
}


void SH1106::write_command(uint8_t command)
{
    Wire.beginTransmission(this->i2c_address);
    Wire.write(0x0);
    Wire.write(command);
    Wire.endTransmission();
}


void SH1106::write_data(uint8_t *data, uint16_t length)
{
    for(uint16_t i = 0; i < length; i++)
    {
        Wire.beginTransmission(this->i2c_address);
        Wire.write(0x40);
        Wire.write(*data);
        Wire.endTransmission();
        data++;
    }
}

void SH1106::set_page(uint16_t page)
{
    write_command(0xb0 + page);
}


void SH1106::clear_oled_buffer()
{
    memset(oled_buffer, 0, 8 * OLED_WIDTH);
}


void SH1106::flush_oled_buffer()
{
    for(uint16_t i = 0; i < 8; i++)
    {
        this->set_page(i);
        this->write_data(oled_buffer[i], OLED_WIDTH);
    }
}


void SH1106::draw_point(uint16_t x, uint16_t y)
{
    // Leave for coordinates outside from display.
    if(y >= OLED_HEIGHT || x >= OLED_WIDTH)
    {
        return;
    }

    oled_buffer[y / 8][x] |= (0x1 << (y % 8));
}



// Draws one letter at the x and y position on the OLED display.
void SH1106::draw_letter(uint16_t x, uint16_t y, uint16_t index)
{
    uint8_t byte_buffer;

    // Height of current char in bits.
    uint16_t height = 13;

    // Table byte offset, where we can find the current char.
    uint16_t table_offset = 0;


    // Calculate the offset fot the letter in the table.
    for(uint16_t i = 0; i < index; i++)
    {
        table_offset += 2 * height;
    }


    // Place the pixels for current letter on display.
    for(uint16_t i = 0; i < height; i++)
    {
        for(uint16_t j = 0; j < 2; j++)
        {
            byte_buffer = pgm_read_byte_near(FONT_TABLE + table_offset + i * 2 + j);

            for(uint16_t bit_pos = 0; bit_pos < 8; bit_pos++)
            {
                if(byte_buffer & (0x1 << (7 - bit_pos)))
                {
                    this->draw_point(x + bit_pos + j * 8, y - i);
                }
            }
        }
    }
}



// Draws the given string at the x and y position on the OLED display.
void SH1106::draw_string(uint16_t x, uint16_t y, const char *string)
{
    uint16_t index;
    uint16_t loop_counter = 0;
    uint16_t x_new;


    // Print one letter after after the other.
    while(*string)
    {
        // Get the letter index in the font table for digits.
        if(isdigit(*string))
        {
            index = *string - '0';

            // Add the letter width to x position.
            x_new = x + pgm_read_byte_near(CHAR_WIDTH_DATA + index);
        }
        // Get the letter index in the font table for upper letters.
        else if(isupper(*string))
        {
            index = (uint16_t)(*string - 'A' + 14);

            // Add the letter width to x position.
            x_new = x + pgm_read_byte_near(CHAR_WIDTH_DATA + index);
        }
        else if(*string == ' ')
        {
            x = x + 5;
            string++;
            continue;
        }
        else if(*string == '%')
        {
            index = 10;
            x_new = x + pgm_read_byte_near(CHAR_WIDTH_DATA + index);
        }
        else if(*string == '.')
        {
            index = 11;
            x_new = x + pgm_read_byte_near(CHAR_WIDTH_DATA + index);
        }
        else if(*string == ':')
        {
            index = 12;
            x_new = x + pgm_read_byte_near(CHAR_WIDTH_DATA + index);
        }
        else if(*string == '$') // '°'
        {
            index = 13;
            x_new = x + pgm_read_byte_near(CHAR_WIDTH_DATA + index);;
        }
        else
        {
            // Couldnt find letter index in the font table.
            string++;
            continue;
        }

        this->draw_letter(x, y, index);
        x = x_new;


        string++;
        loop_counter++;

        // watchdog that breaks in case of too long strings.
        // strings can become very long, when the '\0' char at the end is missing.
        if(loop_counter > 10)
        {
            break;
        }
    }
}
